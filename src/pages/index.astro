---
import Layout from '../layouts/Layout.astro';

import {getCollection} from "astro:content"

const collection = await getCollection("examples")
const examples = collection.map(c => c.data)
const initialExample = examples.find(e => e.highlighted)?.title
---

<script>
    import {ppeg} from "ppegjs"

    window.load = () => {
        const selected = document.querySelector<HTMLSelectElement>('#examples')!.value
        const option = document.querySelector<HTMLOptionElement>(`#option-${selected}`)!
        const grammar = option.dataset.grammar
        const input = option.dataset.input
        document.querySelector<HTMLDivElement>('#grammar')!.textContent = grammar ?? "";
        document.querySelector<HTMLDivElement>('#input')!.textContent = input ?? "";
        window.run()
    }

    window.run = () => {
        const grammar = document.querySelector<HTMLDivElement>('#grammar')!
        const parser = ppeg.compile(grammar.textContent)
        const input = document.querySelector<HTMLDivElement>('#input')!
        const parse = parser.parse(input.innerText)
        const output = document.querySelector<HTMLDivElement>('#output')!;
        const showJson = document.querySelector<HTMLInputElement>('#json')!.checked
        if (parse.ok) output.textContent = parse.show_ptree(showJson);
        else output.textContent = parse.show_err();
    }

    function debounce(fn: Function, delay: number = 300) {
        let timeoutId: ReturnType<typeof setTimeout>;

        return function (this: any, ...args: any[]) {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            timeoutId = setTimeout(() => fn.apply(this, args), delay);
        };
    }


    window.autoparse = debounce(window.run)

    window.load()
</script>

<Layout>
    <style>
        body {
            display: grid;
            grid-template-areas:
                "title   title  title"
                "grammar input  output"
                "footer  footer footer";
            grid-template-rows: auto 1fr auto;
            grid-template-columns: 1fr 1fr 1fr;
            width: 100%;
            height: 100vh;
            padding: 1em;
            gap: 0.5em;
            box-sizing: border-box;
        }

        .title {
            grid-area: title;
        }

        .grammar {
            grid-area: grammar;
        }

        .input {
            grid-area: input;
        }

        .output {
            grid-area: output;
        }

        .footer {
            grid-area: footer;
        }

        .grammar, .input, .output {
            display: grid;
            grid-template-rows: auto 1fr;
            border: thin solid gray;
            min-height: 0; /** necessary to prevent divs from growing below screen **/
        }

        .header {
            height: 20px;
            padding: 5px;
            border-bottom: thin solid gray;
            background: whitesmoke;
            display: flex;
            justify-content: space-between;
        }

        #grammar, #input, #output {
            font-family: "Courier Line Draw", "Courier Prime", "Courier New", monospace;
            white-space: pre-wrap;
            margin: 2px;
            padding: 5px;
            overflow-y: auto;
        }

        .json {
            display: flex;
            align-items: center;
        }

        @media (max-width: 768px) {
            body {
                grid-template-areas:
                    "title"
                    "grammar"
                    "input"
                    "output"
                    "footer";
                grid-template-columns: 1fr;
            }

            /**inputs should no longer be scrollable**/
            #grammar, #input, #output {
                overflow-y: visible;
            }

            /**instead, they should grow**/
            .grammar, .input, .output {
                min-height: auto;
            }
        }
    </style>
    <h1 class="title">pPEG Dingus</h1>

    <div class='grammar'>
        <div class='header'>
            <label for="grammar">Grammar</label>
            <span class='examples'>
                <label for="examples">Examples: </label>
                <select name="examples" id="examples" onchange="load()">
                    {examples.map(({title, grammar, input}) =>
                            <option id={`option-${title}`} value={title} data-grammar={grammar}
                                    data-input={input} selected={title == initialExample}>{title}</option>)}
                </select>
                </span>
        </div>
        <div id='grammar' contenteditable='true' oninput="autoparse()"></div>
    </div>
    <div class='input'>
        <div class='header'>
            <label for="input">Input</label>
        </div>
        <div id='input' contenteditable='true' oninput="autoparse()"></div>
    </div>
    <div class='output'>
        <div class='header'>Parse Tree
            <label class="json">
                JSON
                <input type="checkbox" id="json" name="json" onchange="run()">
            </label>
        </div>
        <div id='output'></div>
    </div>
    <div class="footer">Copyright 2024</div>
</Layout>