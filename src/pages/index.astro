---
import Layout from '../layouts/Layout.astro';

import {getCollection} from "astro:content"

const collection = await getCollection("examples")
const examples = collection.map(c => c.data)
const initialExample = examples.find(e => e.highlighted)?.title
---

<script>
    import {ppeg} from "ppegjs"
    const DESKTOP_SIZE = 768

    const getElement = <T extends Element>(selector: string): T => {
        const element = document.querySelector<T>(selector);
        if (!element) throw new Error("No element found: " + selector);
        return element;
    }

    const examplesSelect = getElement<HTMLSelectElement>('#examples')
    const grammar = getElement<HTMLTextAreaElement>('#grammar')
    const input = getElement<HTMLTextAreaElement>('#input')
    const output = getElement<HTMLTextAreaElement>('#output')
    const jsonCheckbox = getElement<HTMLInputElement>('#json')

    const load = () => {
        const selected = examplesSelect.value
        const option = getElement<HTMLOptionElement>(`#option-${selected}`)
        grammar.value = option.dataset.grammar ?? "";
        input.value = option.dataset.input ?? "";
        run()
    }

    const run = () => {
        const parser = ppeg.compile(grammar.value)
        const parse = parser.parse(input.value)
        const showJson = jsonCheckbox.checked
        if (parse.ok) output.value = parse.show_ptree(showJson);
        else output.value = parse.show_err();
        resize(output)
    }

    const debounce = <T extends (...args: unknown[]) => void>(fn: T, delay: number = 300) => {
        let timeoutId: ReturnType<typeof setTimeout>;

        return function(this: ThisParameterType<T>, ...args: Parameters<T>) {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            timeoutId = setTimeout(() => fn.apply(this, args), delay);
        };
    };

    const autoparse = debounce(run)

    const resize = (el: HTMLElement) => {
        if (document.body.clientWidth <= DESKTOP_SIZE) {
            el.style.height = "0"
            el.style.height = el.scrollHeight + "px"
        } else {
            el.style.height = "auto"
        }
    }

    examplesSelect.addEventListener('change', load);
    // A little hack to ensure the textarea heights grow with content
    [grammar, input, output].forEach(el => el.addEventListener('input', () => resize(el)))
    // The same code needs to run in case we resize from big to small
    window.addEventListener("resize", () => [grammar, input, output].forEach(resize))
    grammar.addEventListener('input', autoparse)
    input.addEventListener('input', autoparse)
    jsonCheckbox.addEventListener('change', run)

    load();
    [grammar, input, output].forEach(resize)
</script>

<Layout>
    <style>
        body {
            display: grid;
            grid-template-areas:
                "title   title"
                "grammar output"
                "input   output"
                "footer  footer";
            grid-template-rows: auto 1fr 1fr auto;
            grid-template-columns: 1fr 1fr;
            width: 100%;
            height: 100vh;
            padding: 1em;
            gap: 0.5em;
            box-sizing: border-box;
        }

        .title {
            grid-area: title;
        }

        .grammar {
            grid-area: grammar;
        }

        .input {
            grid-area: input;
        }

        .output {
            grid-area: output;
        }

        .footer {
            grid-area: footer;
        }

        .grammar, .input, .output {
            display: grid;
            grid-template-rows: auto 1fr;
            border: thin solid gray;
            min-height: 0; /** necessary to prevent divs from growing below screen **/
        }

        .header {
            height: 20px;
            padding: 5px;
            border-bottom: thin solid gray;
            background: whitesmoke;
            display: flex;
            justify-content: space-between;
        }

        #grammar, #input, #output {
            font-family: "Courier Line Draw", "Courier Prime", "Courier New", monospace;
            white-space: pre-wrap;
            margin: 2px;
            padding: 5px;
            overflow-y: auto;
        }

        .json {
            display: flex;
            align-items: center;
        }

        @media (max-width: 768px) {
            body {
                grid-template-areas:
                    "title"
                    "grammar"
                    "input"
                    "output"
                    "footer";
                grid-template-columns: 1fr;
                grid-template-rows: auto;
                height: auto;
            }

            /**inputs should no longer be scrollable**/
            #grammar, #input, #output {
                overflow-y: visible;
            }

            /**instead, they should grow**/
            .grammar, .input, .output {
                min-height: auto;
            }
        }
    </style>
    <h1 class="title">pPEG Dingus</h1>

    <div class='grammar'>
        <div class='header'>
            <label for="grammar">Grammar</label>
            <span class='examples'>
                <label for="examples">Examples: </label>
                <select name="examples" id="examples">
                    {examples.map(({title, grammar, input}) =>
                            <option id={`option-${title}`} value={title} data-grammar={grammar}
                                    data-input={input} selected={title == initialExample}>{title}</option>)}
                </select>
                </span>
        </div>
        <textarea id='grammar'></textarea>
    </div>
    <div class='input'>
        <div class='header'>
            <label for="input">Input</label>
        </div>
        <textarea id='input'"></textarea>
    </div>
    <div class='output'>
        <div class='header'>Parse Tree
            <label class="json">
                JSON
                <input type="checkbox" id="json" name="json">
            </label>
        </div>
        <textarea id='output' disabled></textarea>
    </div>
    <div class="footer">Copyright 2024</div>
</Layout>